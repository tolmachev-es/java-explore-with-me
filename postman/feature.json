{
	"info": {
		"_postman_id": "8ba1725e-8e18-4be1-b29b-f721bcf870bb",
		"name": "Friend tests correct",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "29052040"
	},
	"item": [
		{
			"name": "Отправка запроса в друзья",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async() => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"    let compilation;\r",
							"    try {\r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"        pm.collectionVariables.set(\"userId\", user.id)\r",
							"        const user2 = await api.addUser(rnd.getUser());\r",
							"        pm.collectionVariables.set(\"friendId\", user2.id)\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"}\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/friends/{{userId}}/request/{{friendId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"friends",
						"{{userId}}",
						"request",
						"{{friendId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Отправка запроса в друзья один из пользователей не найден",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async() => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"    let compilation;\r",
							"    try {\r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"        pm.collectionVariables.set(\"userId\", user.id)\r",
							"        const user2 = await api.addUser(rnd.getUser());\r",
							"        pm.collectionVariables.set(\"friendId\", user2.id + 1)\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"}\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(404); \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/friends/{{userId}}/request/{{friendId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"friends",
						"{{userId}}",
						"request",
						"{{friendId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Повторная отправка запроса в друзья",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async() => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"    let compilation;\r",
							"    try {\r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"        pm.collectionVariables.set(\"userId\", user.id)\r",
							"        const user2 = await api.addUser(rnd.getUser());\r",
							"        pm.collectionVariables.set(\"friendId\", user2.id)\r",
							"        const friend = await api.addFriend(user.id, user2.id);\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"}\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(409); \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/friends/{{userId}}/request/{{friendId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"friends",
						"{{userId}}",
						"request",
						"{{friendId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Прием запроса дружбы",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async() => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"    let compilation;\r",
							"    try {\r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"        pm.collectionVariables.set(\"userId\", user.id)\r",
							"        const user2 = await api.addUser(rnd.getUser());\r",
							"        pm.collectionVariables.set(\"friendId\", user2.id)\r",
							"        const friend = await api.addFriend(user.id, user2.id);\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"}\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/friends/{{friendId}}/request/{{userId}}?state=APPROVED",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"friends",
						"{{friendId}}",
						"request",
						"{{userId}}"
					],
					"query": [
						{
							"key": "state",
							"value": "APPROVED"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Отклонение запроса дружбы",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async() => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"    let compilation;\r",
							"    try {\r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"        pm.collectionVariables.set(\"userId\", user.id)\r",
							"        const user2 = await api.addUser(rnd.getUser());\r",
							"        pm.collectionVariables.set(\"friendId\", user2.id)\r",
							"        const friend = await api.addFriend(user.id, user2.id);\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"}\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/friends/{{friendId}}/request/{{userId}}?state=CANCEL",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"friends",
						"{{friendId}}",
						"request",
						"{{userId}}"
					],
					"query": [
						{
							"key": "state",
							"value": "CANCEL"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Отклонение запроса дружбы, запрос уже отменен",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async() => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"    let compilation;\r",
							"    try {\r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"        pm.collectionVariables.set(\"userId\", user.id)\r",
							"        const friend = await api.addUser(rnd.getUser());\r",
							"        pm.collectionVariables.set(\"friendId\", friend.id)\r",
							"        const friendRequest = await api.addFriend(user.id, friend.id);\r",
							"        const appendRequest = await api.changeStatuseForFriendRequest(user.id, friend.id, \"CANCEL\")\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"}\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 409\", function () {\r",
							"    pm.response.to.have.status(409);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/friends/{{friendId}}/request/{{userId}}?state=CANCEL",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"friends",
						"{{friendId}}",
						"request",
						"{{userId}}"
					],
					"query": [
						{
							"key": "state",
							"value": "CANCEL"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Прием запроса дружбы, запрос не найден",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async() => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"    let compilation;\r",
							"    try {\r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"        pm.collectionVariables.set(\"userId\", user.id)\r",
							"        const user2 = await api.addUser(rnd.getUser());\r",
							"        pm.collectionVariables.set(\"friendId\", user2.id)\r",
							"        const friend = await api.addFriend(user.id, user2.id);\r",
							"        pm.collectionVariables.set(\"userId\", user.id + 2)\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"}\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/friends/{{friendId}}/request/{{userId}}?state=CANCEL",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"friends",
						"{{friendId}}",
						"request",
						"{{userId}}"
					],
					"query": [
						{
							"key": "state",
							"value": "CANCEL"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Прием запроса дружбы, запрос дружбы уже принят",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async() => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"    let compilation;\r",
							"    try {\r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"        pm.collectionVariables.set(\"userId\", user.id)\r",
							"        const friend = await api.addUser(rnd.getUser());\r",
							"        pm.collectionVariables.set(\"friendId\", friend.id)\r",
							"        const friendRequest = await api.addFriend(user.id, friend.id);\r",
							"        const appendRequest = await api.changeStatuseForFriendRequest(user.id, friend.id, \"APPROVED\")\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"}\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 409\", function () {\r",
							"    pm.response.to.have.status(409);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/friends/{{friendId}}/request/{{userId}}?state=APPROVED",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"friends",
						"{{friendId}}",
						"request",
						"{{userId}}"
					],
					"query": [
						{
							"key": "state",
							"value": "APPROVED"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Удаление из друзей пользователь n1 удаляется у n2",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async() => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"    let compilation;\r",
							"    try {\r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"        pm.collectionVariables.set(\"userId\", user.id)\r",
							"        const friend = await api.addUser(rnd.getUser());\r",
							"        pm.collectionVariables.set(\"friendId\", friend.id)\r",
							"        const friendRequest = await api.addFriend(user.id, friend.id);\r",
							"        const appendRequest = await api.changeStatuseForFriendRequest(user.id, friend.id, \"APPROVED\")\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"}\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/friends/{{friendId}}/friendship/{{userId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"friends",
						"{{friendId}}",
						"friendship",
						"{{userId}}"
					],
					"query": [
						{
							"key": "state",
							"value": "APPROVED",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Удаление из друзей пользователь n2 удаляется у n1",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async() => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"    let compilation;\r",
							"    try {\r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"        pm.collectionVariables.set(\"userId\", user.id)\r",
							"        const friend = await api.addUser(rnd.getUser());\r",
							"        pm.collectionVariables.set(\"friendId\", friend.id)\r",
							"        const friendRequest = await api.addFriend(user.id, friend.id);\r",
							"        const appendRequest = await api.changeStatuseForFriendRequest(user.id, friend.id, \"APPROVED\")\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"}\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/friends/{{userId}}/friendship/{{friendId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"friends",
						"{{userId}}",
						"friendship",
						"{{friendId}}"
					],
					"query": [
						{
							"key": "state",
							"value": "APPROVED",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Удаление из друзей, пользователи не являются друзьями",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async() => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"    let compilation;\r",
							"    try {\r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"        pm.collectionVariables.set(\"userId\", user.id)\r",
							"        const friend = await api.addUser(rnd.getUser());\r",
							"        pm.collectionVariables.set(\"friendId\", friend.id)\r",
							"        const friendRequest = await api.addFriend(user.id, friend.id);\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"}\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/friends/{{userId}}/friendship/{{friendId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"friends",
						"{{userId}}",
						"friendship",
						"{{friendId}}"
					],
					"query": [
						{
							"key": "state",
							"value": "APPROVED",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Посмотреть исходящие запросы дружбы",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async() => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"    let compilation;\r",
							"    try {\r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"        pm.collectionVariables.set(\"userId\", user.id)\r",
							"        const user2 = await api.addUser(rnd.getUser());\r",
							"        pm.collectionVariables.set(\"friendId\", user2.id)\r",
							"        const user3 = await api.addUser(rnd.getUser());\r",
							"        pm.collectionVariables.set(\"userId3\", user3.id)\r",
							"        const friend1 = await api.addFriend(user.id, user2.id);\r",
							"        const friend2 = await api.addFriend(user.id, user3.id);\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"}\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200\", function () {\r",
							"    pm.response.to.be.ok;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Должно быть найдено 2 друга\", function () {\r",
							"    pm.expect(target.length).to.eql(2);\r",
							"});\r",
							"\r",
							"pm.test(\"Должны быть запросы для данных пользователей\", function() {\r",
							"    pm.expect(target[0].id).to.be.eql(parseInt(pm.collectionVariables.get(\"friendId\")));\r",
							"    pm.expect(target[1].id).to.be.eql(parseInt(pm.collectionVariables.get(\"userId3\")));\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/friends/{{userId}}/request/outbox?from=0&size=10",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"friends",
						"{{userId}}",
						"request",
						"outbox"
					],
					"query": [
						{
							"key": "from",
							"value": "0"
						},
						{
							"key": "size",
							"value": "10"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Посмотреть входящие запросы дружбы",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async() => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"    let compilation;\r",
							"    try {\r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"        pm.collectionVariables.set(\"userId\", user.id)\r",
							"        const user2 = await api.addUser(rnd.getUser());\r",
							"        pm.collectionVariables.set(\"friendId\", user2.id)\r",
							"        const user3 = await api.addUser(rnd.getUser());\r",
							"        pm.collectionVariables.set(\"userId3\", user3.id)\r",
							"        const friend1 = await api.addFriend(user.id, user2.id);\r",
							"        const friend2 = await api.addFriend(user.id, user3.id);\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"}\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200\", function () {\r",
							"    pm.response.to.be.ok;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Должно быть найден один входящий запрос\", function () {\r",
							"    pm.expect(target.length).to.eql(1);\r",
							"});\r",
							"\r",
							"pm.test(\"Должны быть запросы для данных пользователей\", function() {\r",
							"    pm.expect(target[0].id).to.be.eql(parseInt(pm.collectionVariables.get(\"userId\")));\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/friends/{{friendId}}/request/inbox?from=0&size=10",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"friends",
						"{{friendId}}",
						"request",
						"inbox"
					],
					"query": [
						{
							"key": "from",
							"value": "0"
						},
						{
							"key": "size",
							"value": "10"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Просмотр друзей",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async() => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"    let compilation;\r",
							"    try {\r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"        pm.collectionVariables.set(\"userId\", user.id)\r",
							"        const user2 = await api.addUser(rnd.getUser());\r",
							"        pm.collectionVariables.set(\"friendId\", user2.id)\r",
							"        const user3 = await api.addUser(rnd.getUser());\r",
							"        pm.collectionVariables.set(\"userId3\", user3.id)\r",
							"        const friendRequest = await api.addFriend(user.id, user2.id);\r",
							"        const friendRequest2 = await api.addFriend(user.id, user3.id);\r",
							"        const appendRequest = await api.changeStatuseForFriendRequest(user.id, user2.id, \"APPROVED\")\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"}\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Должно быть найден один входящий запрос\", function () {\r",
							"    pm.expect(target.length).to.eql(1);\r",
							"});\r",
							"\r",
							"pm.test(\"Должны быть запросы для данных пользователей\", function() {\r",
							"    pm.expect(target[0].id).to.be.eql(parseInt(pm.collectionVariables.get(\"userId\")));\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/friends/{{friendId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"friends",
						"{{friendId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Посмотреть список актуальных событий пользователя",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async() => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"    let compilation;\r",
							"    try {\r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"        pm.collectionVariables.set(\"userId\", user.id)\r",
							"        const friend = await api.addUser(rnd.getUser());\r",
							"        pm.collectionVariables.set(\"friendId\", friend.id)\r",
							"        const user3 = await api.addUser(rnd.getUser());\r",
							"        pm.collectionVariables.set(\"userId3\", user3.id);\r",
							"        await api.addFriend(user.id, friend.id);\r",
							"        await api.changeStatuseForFriendRequest(user.id, friend.id, \"APPROVED\")\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"        const event = await api.addEvent(user3.id, rnd.getEventWithoutRandomLimitAndModeration(category.id));\r",
							"        pm.collectionVariables.set(\"eventId\", event.id);\r",
							"        await api.publishEvent(event.id);\r",
							"        await api.publishParticipationRequest(event.id, friend.id);\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"}\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200\", function () {\r",
							"    pm.response.to.be.ok;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Должен быть найдено только одно событие\", function() {\r",
							"    pm.expect(target.length).to.eql(1);\r",
							"});\r",
							"\r",
							"pm.test(\"\", function() {\r",
							"    pm.expect(target[0].id).to.be.eql(parseInt(pm.collectionVariables.get(\"eventId\")));\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/users/events/{{userId}}/friend/{{friendId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"events",
						"{{userId}}",
						"friend",
						"{{friendId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Подписка на другого пользователя",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async() => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"    let compilation;\r",
							"    try {\r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"        pm.collectionVariables.set(\"userId\", user.id)\r",
							"        const user2 = await api.addUser(rnd.getUser());\r",
							"        pm.collectionVariables.set(\"friendId\", user2.id)\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"}\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/subscription/{{userId}}/request/{{friendId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"subscription",
						"{{userId}}",
						"request",
						"{{friendId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Подписка на другого пользователя, один из пользователей не найден",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async() => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"    let compilation;\r",
							"    try {\r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"        pm.collectionVariables.set(\"userId\", user.id)\r",
							"        const user2 = await api.addUser(rnd.getUser());\r",
							"        pm.collectionVariables.set(\"friendId\", user2.id + 1)\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"}\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/subscription/{{userId}}/request/{{friendId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"subscription",
						"{{userId}}",
						"request",
						"{{friendId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Повторная подписка на другого пользователя",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async() => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"    let compilation;\r",
							"    try {\r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"        pm.collectionVariables.set(\"userId\", user.id)\r",
							"        const user2 = await api.addUser(rnd.getUser());\r",
							"        pm.collectionVariables.set(\"friendId\", user2.id)\r",
							"        await api.addSubscibe(user.id, user2.id);\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"}\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(409); \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/subscription/{{userId}}/request/{{friendId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"subscription",
						"{{userId}}",
						"request",
						"{{friendId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Отписка от куратора, отсутствует подписка",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async() => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"    let compilation;\r",
							"    try {\r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"        pm.collectionVariables.set(\"userId\", user.id)\r",
							"        const user2 = await api.addUser(rnd.getUser());\r",
							"        pm.collectionVariables.set(\"friendId\", user2.id)\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"}\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 404\", function () {\r",
							"    pm.response.to.have.status(404); \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/subscription/{{userId}}/request/{{friendId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"subscription",
						"{{userId}}",
						"request",
						"{{friendId}}"
					],
					"query": [
						{
							"key": "state",
							"value": "APPROVED",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Получение подписок на пользователей",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async() => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"    let compilation;\r",
							"    try {\r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"        pm.collectionVariables.set(\"userId\", user.id)\r",
							"        const user2 = await api.addUser(rnd.getUser());\r",
							"        pm.collectionVariables.set(\"friendId\", user2.id)\r",
							"        const user3 = await api.addUser(rnd.getUser());\r",
							"        pm.collectionVariables.set(\"userId3\", user3.id)\r",
							"        await api.addSubscibe(user.id, user2.id);\r",
							"        await api.addSubscibe(user.id, user3.id);\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"}\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Должно быть найден один входящий запрос\", function () {\r",
							"    pm.expect(target.length).to.eql(2);\r",
							"});\r",
							"\r",
							"pm.test(\"Должны быть запросы для данных пользователей\", function() {\r",
							"    pm.expect(target[0].id).to.be.eql(parseInt(pm.collectionVariables.get(\"friendId\")));\r",
							"    pm.expect(target[1].id).to.be.eql(pm.collectionVariables.get(\"userId3\"));\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/subscription/{{userId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"subscription",
						"{{userId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Получение подписок на пользователей с пагинацией",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async() => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"    let compilation;\r",
							"    try {\r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"        pm.collectionVariables.set(\"userId\", user.id)\r",
							"        const user2 = await api.addUser(rnd.getUser());\r",
							"        pm.collectionVariables.set(\"friendId\", user2.id)\r",
							"        const user3 = await api.addUser(rnd.getUser());\r",
							"        pm.collectionVariables.set(\"userId3\", user3.id)\r",
							"        await api.addSubscibe(user.id, user2.id);\r",
							"        await api.addSubscibe(user.id, user3.id);\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"}\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Должно быть найден один входящий запрос\", function () {\r",
							"    pm.expect(target.length).to.eql(1);\r",
							"});\r",
							"\r",
							"pm.test(\"Должны быть запросы для данных пользователей\", function() {\r",
							"    pm.expect(target[0].id).to.be.eql(parseInt(pm.collectionVariables.get(\"friendId\")));\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/subscription/{{userId}}?from=0&size=1",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"subscription",
						"{{userId}}"
					],
					"query": [
						{
							"key": "from",
							"value": "0"
						},
						{
							"key": "size",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Получение событий по подпискам",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async() => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"    let compilation;\r",
							"    try {\r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"        pm.collectionVariables.set(\"userId\", user.id)\r",
							"        const user2 = await api.addUser(rnd.getUser());\r",
							"        pm.collectionVariables.set(\"friendId\", user2.id)\r",
							"        const user3 = await api.addUser(rnd.getUser());\r",
							"        pm.collectionVariables.set(\"userId3\", user3.id);\r",
							"        await api.addSubscibe(user.id, user2.id);\r",
							"        await api.addSubscibe(user.id, user3.id);\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"        const event = await api.addEvent(user3.id, rnd.getEventWithoutRandomLimitAndModeration(category.id));\r",
							"        pm.collectionVariables.set(\"eventId\", event.id);\r",
							"        await api.publishEvent(event.id);\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"}\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Должно быть найдено одно событие\", function () {\r",
							"    pm.expect(target.length).to.eql(1);\r",
							"});\r",
							"\r",
							"pm.test(\"Должны быть запросы для данных пользователей\", function() {\r",
							"    pm.expect(target[0].id).to.be.eql(parseInt(pm.collectionVariables.get(\"eventId\")));\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/users/events/{{userId}}/subscription",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"events",
						"{{userId}}",
						"subscription"
					],
					"query": [
						{
							"key": "from",
							"value": "0",
							"disabled": true
						},
						{
							"key": "size",
							"value": "1",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Получение событий по подпискам проверка сортировки",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async() => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"    let compilation;\r",
							"    try {\r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"        pm.collectionVariables.set(\"userId\", user.id)\r",
							"        const user2 = await api.addUser(rnd.getUser());\r",
							"        pm.collectionVariables.set(\"friendId\", user2.id)\r",
							"        const user3 = await api.addUser(rnd.getUser());\r",
							"        pm.collectionVariables.set(\"userId3\", user3.id);\r",
							"        await api.addSubscibe(user.id, user2.id);\r",
							"        await api.addSubscibe(user.id, user3.id);\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"        const event1 = await api.addEvent(user3.id, rnd.getEventWithoutRandomLimitAndModeration(category.id));\r",
							"        pm.collectionVariables.set(\"eventId\", event1.id);\r",
							"        await api.publishEvent(event1.id);\r",
							"        const event2 = await api.addEvent(user2.id, rnd.getEventWithoutRandomLimitAndModerationWithBiggerTimeshift(category.id));\r",
							"        pm.collectionVariables.set(\"eventId2\", event2.id);\r",
							"        await api.publishEvent(event2.id);\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"}\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100\r",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Должно быть найдено одно событие\", function () {\r",
							"    pm.expect(target.length).to.eql(2);\r",
							"});\r",
							"\r",
							"pm.test(\"Должны быть запросы для данных пользователей\", function() {\r",
							"    pm.expect(target[0].id).to.be.eql(parseInt(pm.collectionVariables.get(\"eventId\")));\r",
							"    pm.expect(target[1].id).to.be.eql(parseInt(pm.collectionVariables.get(\"eventId2\")));\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/users/events/{{userId}}/subscription?sort=EVENT_DATE",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"events",
						"{{userId}}",
						"subscription"
					],
					"query": [
						{
							"key": "from",
							"value": "0",
							"disabled": true
						},
						{
							"key": "size",
							"value": "1",
							"disabled": true
						},
						{
							"key": "sort",
							"value": "EVENT_DATE"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"API = class {\r",
					"    constructor(postman, verbose = false, baseUrl = \"http://localhost:8080\") {\r",
					"        this.baseUrl = baseUrl;\r",
					"        this.pm = postman;\r",
					"        this._verbose = verbose;\r",
					"    }\r",
					"\r",
					"    async addUser(user, verbose=null) {\r",
					"        return this.post(\"/admin/users\", user, \"Ошибка при добавлении нового пользователя: \", verbose);\r",
					"    }\r",
					"\r",
					"    async addFriend(user, friend, verbose=null) {\r",
					"        return this.postWithoutBody(\"/friends/\" + user + \"/request/\" + friend, \"Ошибка при добавлении в друзья\", verbose);\r",
					"    }\r",
					"\r",
					"    async addSubscibe(user, curator, verbose=null) {\r",
					"        return this.postWithoutBody(\"/subscription/\" + user + \"/request/\" + curator, \"Ошибка при подписке\", verbose);\r",
					"    }\r",
					"\r",
					"    async changeStatuseForFriendRequest(user, friend, state, verbose=null) {\r",
					"        return this.patchWithoutBody(\"/friends/\" + friend + \"/request/\" + user + \"?state=\" + state, \"Ошибка при изменении статуса дружбы\", verbose);\r",
					"    }\r",
					"\r",
					"    async addCategory(category, verbose=null) {\r",
					"        return this.post(\"/admin/categories\", category, \"Ошибка при добавлении новой категории: \", verbose);\r",
					"    }\r",
					"\r",
					"    async addEvent(userId, event, verbose=null) {\r",
					"        return this.post(\"/users/\" + userId + \"/events\", event, \"Ошибка при добавлении нового события: \", verbose);\r",
					"    }\r",
					"\r",
					"    async addCompilation(compilation, verbose=null) {\r",
					"        return this.post(\"/admin/compilations\", compilation, \"Ошибка при добавлении новой подборки: \", verbose);\r",
					"    }\r",
					"\r",
					"    async publishParticipationRequest(eventId, userId, verbose=null) {\r",
					"        return this.post('/users/' + userId + '/requests?eventId=' + eventId, null, \"Ошибка при добавлении нового запроса на участие в событии\", verbose);\r",
					"    }\r",
					"\r",
					"    async publishEvent(eventId, verbose=null) {\r",
					"        return this.patch('/admin/events/' + eventId, {stateAction: \"PUBLISH_EVENT\"}, \"Ошибка при публикации события\", verbose);\r",
					"    }\r",
					"    \r",
					"    async rejectEvent(eventId, verbose=null) {\r",
					"        return this.patch('/admin/events/' + eventId, {stateAction: \"REJECT_EVENT\"}, \"Ошибка при отмене события\", verbose);\r",
					"    }\r",
					"\r",
					"    async acceptParticipationRequest(eventId, userId, reqId, verbose=null) {\r",
					"        return this.patch('/users/' + userId + '/events/' + eventId + '/requests/', {requestIds:[reqId], status: \"CONFIRMED\"}, \"Ошибка при принятии заявки на участие в событии\", verbose);\r",
					"    }\r",
					"\r",
					"    async findCategory(catId, verbose=null) {\r",
					"        return this.get('/categories/' + catId, null, \"Ошибка при поиске категории по id\", verbose);\r",
					"    }\r",
					"\r",
					"    async findCompilation(compId, verbose=null) {\r",
					"        return this.get('/compilations/' + compId, null, \"Ошибка при поиске подборки по id\", verbose);\r",
					"    }\r",
					"\r",
					"    async findEvent(eventId, verbose=null) {\r",
					"        return this.get('/events/' + eventId, null, \"Ошибка при поиске события по id\", verbose);\r",
					"    }\r",
					"\r",
					"    async findUser(userId, verbose=null) {\r",
					"        return this.get('/admin/users?ids=' + userId, null, \"Ошибка при поиске пользователя по id\", verbose);\r",
					"    }\r",
					"\r",
					"    async post(path, body, errorText = \"Ошибка при выполнении post-запроса: \", verbose=null) {\r",
					"        return this.sendRequest(\"POST\", path, body, errorText, verbose);\r",
					"    }\r",
					"\r",
					"    async postWithoutBody(path, errorText = \"Ошибка при выполнении post-запроса: \", verbose=null) {\r",
					"        return this.sendRequestWithoutResponseBody(\"POST\", path, null, errorText, verbose);\r",
					"    }\r",
					"\r",
					"    async patchWithoutBody(path, errorText = \"Ошибка при выполнени patch-запроса: \", verbose=null) {\r",
					"        return this.sendRequestWithoutResponseBody(\"PATCH\", path, null, errorText, verbose);\r",
					"    }\r",
					"\r",
					"    async patch(path, body = null, errorText = \"Ошибка при выполнении patch-запроса: \", verbose=null) {\r",
					"        return this.sendRequest(\"PATCH\", path, body, errorText, verbose);\r",
					"    }\r",
					"\r",
					"    async get(path, body = null, errorText = \"Ошибка при выполнении get-запроса: \", verbose=null) {\r",
					"        return this.sendRequest(\"GET\", path, body, errorText, verbose);\r",
					"    }\r",
					"\r",
					"    async sendRequest(method, path, body=null, errorText = \"Ошибка при выполнении запроса: \", verbose=null) {\r",
					"        return new Promise((resolve, reject) => {\r",
					"            verbose = verbose == null ? this._verbose : verbose;\r",
					"            const request = {\r",
					"                url: this.baseUrl + path,\r",
					"                method: method,\r",
					"                body: body == null ? \"\" : JSON.stringify(body),\r",
					"                header: { \"Content-Type\": \"application/json\" },\r",
					"            };\r",
					"            if(verbose) {\r",
					"                console.log(\"Отправляю запрос: \", request);\r",
					"            }\r",
					"\r",
					"            try {\r",
					"                this.pm.sendRequest(request, (error, response) => {\r",
					"                    if(error || (response.code >= 400 && response.code <= 599)) {\r",
					"                        let err = error ? error : JSON.stringify(response.json());\r",
					"                        console.error(\"При выполнении запроса к серверу возникла ошика.\\n\", err,\r",
					"                             \"\\nДля отладки проблемы повторите такой же запрос к вашей программе \" + \r",
					"                             \"на локальном компьютере. Данные запроса:\\n\", JSON.stringify(request));\r",
					"\r",
					"                        reject(new Error(errorText + err));\r",
					"                    }\r",
					"                    if(verbose) {\r",
					"                        console.log(\"Результат обработки запроса: код состояния - \", response.code, \", тело: \", response.json());\r",
					"                    }\r",
					"                    if (response.stream.length === 0){\r",
					"                        reject(new Error('Отправлено пустое тело ответа'))\r",
					"                    }else{\r",
					"                        resolve(response.json());\r",
					"                    }\r",
					"                });\r",
					"                \r",
					"            } catch(err) {\r",
					"                if(verbose) {\r",
					"                    console.error(errorText, err);\r",
					"                }\r",
					"                return Promise.reject(err);\r",
					"            }\r",
					"        });\r",
					"    }\r",
					"\r",
					"    async sendRequestWithoutResponseBody(method, path, body=null, errorText = \"Ошибка при выполнении запроса: \", verbose=null) {\r",
					"        return new Promise((resolve, reject) => {\r",
					"            verbose = verbose == null ? this._verbose : verbose;\r",
					"            const request = {\r",
					"                url: this.baseUrl + path,\r",
					"                method: method,\r",
					"                body: body == null ? \"\" : JSON.stringify(body),\r",
					"                header: { \"Content-Type\": \"application/json\" },\r",
					"            };\r",
					"            if(verbose) {\r",
					"                console.log(\"Отправляю запрос: \", request);\r",
					"            }\r",
					"\r",
					"            try {\r",
					"                this.pm.sendRequest(request, (error, response) => {\r",
					"                    if(error || (response.code >= 400 && response.code <= 599)) {\r",
					"                        let err = error ? error : JSON.stringify(response.json());\r",
					"                        console.error(\"При выполнении запроса к серверу возникла ошика.\\n\", err,\r",
					"                             \"\\nДля отладки проблемы повторите такой же запрос к вашей программе \" + \r",
					"                             \"на локальном компьютере. Данные запроса:\\n\", JSON.stringify(request));\r",
					"\r",
					"                        reject(new Error(errorText + err));\r",
					"                    }\r",
					"                    if(verbose) {\r",
					"                        console.log(\"Результат обработки запроса: код состояния - \", response.code);\r",
					"                    }\r",
					"                    if (response.stream.length > 0) {\r",
					"                        reject(new Error('Ответ содержит тело'));\r",
					"                    } else {\r",
					"                        resolve(\"Ответ получен, но пустой\");\r",
					"}\r",
					"                });\r",
					"                \r",
					"            } catch(err) {\r",
					"                if(verbose) {\r",
					"                    console.error(errorText, err);\r",
					"                }\r",
					"                return Promise.reject(err);\r",
					"            }\r",
					"        });\r",
					"    }\r",
					"\r",
					"};\r",
					"\r",
					"RandomUtils = class {\r",
					"    constructor() {}\r",
					"\r",
					"    getUser() {\r",
					"        return {\r",
					"            name: pm.variables.replaceIn('{{$randomFullName}}'),\r",
					"            email: pm.variables.replaceIn('{{$randomEmail}}')\r",
					"        };\r",
					"    }\r",
					"\r",
					"    getCategory() {\r",
					"        return {\r",
					"            name: pm.variables.replaceIn('{{$randomWord}}') + Math.floor(Math.random() * 10000 * Math.random()).toString()\r",
					"        };\r",
					"    }\r",
					"\r",
					"    getEvent(categoryId) {\r",
					"        return {\r",
					"            annotation: pm.variables.replaceIn('{{$randomLoremParagraph}}'),\r",
					"            category: categoryId,\r",
					"            description: pm.variables.replaceIn('{{$randomLoremParagraphs}}'),\r",
					"            eventDate: this.getFutureDateTime(),\r",
					"            location: {\r",
					"                lat: parseFloat(pm.variables.replaceIn('{{$randomLatitude}}')),\r",
					"                lon: parseFloat(pm.variables.replaceIn('{{$randomLongitude}}')),\r",
					"            },\r",
					"            paid: pm.variables.replaceIn('{{$randomBoolean}}'),\r",
					"            participantLimit: pm.variables.replaceIn('{{$randomInt}}'),\r",
					"            requestModeration: pm.variables.replaceIn('{{$randomBoolean}}'),\r",
					"            title: pm.variables.replaceIn('{{$randomLoremSentence}}'),\r",
					"        }\r",
					"    }\r",
					"\r",
					"    getEventWithoutRandomLimitAndModeration(categoryId) {\r",
					"        return {\r",
					"            annotation: pm.variables.replaceIn('{{$randomLoremParagraph}}'),\r",
					"            category: categoryId,\r",
					"            description: pm.variables.replaceIn('{{$randomLoremParagraphs}}'),\r",
					"            eventDate: this.getFutureDateTime(),\r",
					"            location: {\r",
					"                lat: parseFloat(pm.variables.replaceIn('{{$randomLatitude}}')),\r",
					"                lon: parseFloat(pm.variables.replaceIn('{{$randomLongitude}}')),\r",
					"            },\r",
					"            paid: pm.variables.replaceIn('{{$randomBoolean}}'),\r",
					"            participantLimit: pm.variables.replaceIn('0'),\r",
					"            requestModeration: pm.variables.replaceIn('false'),\r",
					"            title: pm.variables.replaceIn('{{$randomLoremSentence}}'),\r",
					"        }\r",
					"    }\r",
					"\r",
					"    getEventWithoutRandomLimitAndModerationWithBiggerTimeshift(categoryId) {\r",
					"        return {\r",
					"            annotation: pm.variables.replaceIn('{{$randomLoremParagraph}}'),\r",
					"            category: categoryId,\r",
					"            description: pm.variables.replaceIn('{{$randomLoremParagraphs}}'),\r",
					"            eventDate: this.getFutureDateTimeWithAnotherShift(),\r",
					"            location: {\r",
					"                lat: parseFloat(pm.variables.replaceIn('{{$randomLatitude}}')),\r",
					"                lon: parseFloat(pm.variables.replaceIn('{{$randomLongitude}}')),\r",
					"            },\r",
					"            paid: pm.variables.replaceIn('{{$randomBoolean}}'),\r",
					"            participantLimit: pm.variables.replaceIn('0'),\r",
					"            requestModeration: pm.variables.replaceIn('false'),\r",
					"            title: pm.variables.replaceIn('{{$randomLoremSentence}}'),\r",
					"        }\r",
					"    }\r",
					"\r",
					"    getCompilation(...eventIds) {\r",
					"        return {\r",
					"            title: pm.variables.replaceIn('{{$randomLoremSentence}}').slice(0, 50),\r",
					"            pinned: pm.variables.replaceIn('{{$randomBoolean}}'),\r",
					"            events: eventIds\r",
					"        };\r",
					"    }\r",
					"\r",
					"\r",
					"    getFutureDateTime(hourShift = 5, minuteShift=0, yearShift=0) {\r",
					"        let moment = require('moment');\r",
					"\r",
					"        let m = moment();\r",
					"        m.add(hourShift, 'hour');\r",
					"        m.add(minuteShift, 'minute');\r",
					"        m.add(yearShift, 'year');\r",
					"\r",
					"        return m.format('YYYY-MM-DD HH:mm:ss');\r",
					"    }\r",
					"    getFutureDateTimeWithAnotherShift(hourShift = 6, minuteShift=0, yearShift=0) {\r",
					"        let moment = require('moment');\r",
					"\r",
					"        let m = moment();\r",
					"        m.add(hourShift, 'hour');\r",
					"        m.add(minuteShift, 'minute');\r",
					"        m.add(yearShift, 'year');\r",
					"\r",
					"        return m.format('YYYY-MM-DD HH:mm:ss');\r",
					"    }\r",
					"\r",
					"    getWord(length = 1) {\r",
					"        let result = '';\r",
					"        const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
					"        const charactersLength = characters.length;\r",
					"        let counter = 0;\r",
					"        while (counter < length) {\r",
					"            result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
					"            counter += 1;\r",
					"        }\r",
					"        return result;\r",
					"    }\r",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080",
			"type": "string"
		},
		{
			"key": "userId",
			"value": "1",
			"type": "string"
		},
		{
			"key": "friendId",
			"value": "1",
			"type": "string"
		},
		{
			"key": "userId3",
			"value": "1",
			"type": "string"
		},
		{
			"key": "eventId",
			"value": "1",
			"type": "string"
		},
		{
			"key": "eventId2",
			"value": "1",
			"type": "string"
		}
	]
}